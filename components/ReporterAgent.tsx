
import React, { useState, useRef, useEffect, useCallback, useMemo } from 'react';
import { User } from '../types';
import ReportSummary from './ReportSummary';
import SpinnerIcon from './icons/SpinnerIcon';
import { ai, analyzeImageAuthenticity } from '../services/geminiService';
import { Type } from "@google/genai";
import ChevronLeftIcon from './icons/ChevronLeftIcon';
import { getDistrictNames, getDistrictData, District } from '../data/locationService';
import CameraCapture from './CameraCapture';
import EmotionRecorder from './EmotionRecorder';
import VideoRecorder from './VideoRecorder';

import CheckCircleIcon from './icons/CheckCircleIcon';
import ExclamationTriangleIcon from './icons/ExclamationTriangleIcon';
import RobotIcon from './icons/RobotIcon';
import MicIcon from './icons/MicIcon';
import SpeakerOnIcon from './icons/SpeakerOnIcon';
import SpeakerOffIcon from './icons/SpeakerOffIcon';

// Add SpeechRecognition type declaration for browser compatibility
declare global {
    interface Window {
        SpeechRecognition: any;
        webkitSpeechRecognition: any;
    }
}

// Helper to reliably get synthesis voices, which can load asynchronously.
const getVoices = (): Promise<SpeechSynthesisVoice[]> => {
  return new Promise(resolve => {
    const voices = window.speechSynthesis.getVoices();
    if (voices.length) {
      resolve(voices);
      return;
    }
    window.speechSynthesis.addEventListener('voiceschanged', () => {
      resolve(window.speechSynthesis.getVoices());
    }, { once: true });
  });
};


interface ReporterAgentProps {
  onBack: () => void;
  onSubmit: (report: any) => void;
  user: User;
}

type ConversationStage = 
  'language' | 'district' | 'panchayat' | 'village' | 'street' | 'landmark' | 
  'title' | 'category' | 'urgency' | 'description' | 
  'evidence' | 'processing' | 'summary' | 'completed';

type Language = 'en' | 'ta' | 'hi';

type AnalysisStatus = {
    status: 'Authentic' | 'Manipulated' | 'AI-Generated';
    confidence: number;
    reasoning: string;
};

interface Evidence {
    photo: string;
    gps: { lat: number; lng: number; accuracy: number } | null;
    timestamp: string;
    analysis?: AnalysisStatus | 'pending';
}

const translations: Record<Language, Record<string, string> & { langCode: string }> = {
  en: {
    welcome: "Hello. I am Arya, an AI social service investigator with CivicGuard. I'm here to help document the issue you are reporting. To start, please choose your preferred language below.",
    district_prompt: "Which district are you reporting from?",
    panchayat_prompt: "Please tell me your Panchayat name.",
    village_prompt: "Which village is this issue located in?",
    street_prompt: "Enter the street or locality.",
    landmark_prompt: "Do you want to add a nearby landmark? (Optional)",
    title_prompt: "Give a short title for the issue.",
    category_prompt: "Select the issue category. Example: Roads, Water, Electricity.",
    urgency_prompt: "How urgent is this issue? (Low / Medium / High)",
    description_prompt: "Please describe the issue in detail.",
    evidence_prompt_message: "Thank you for the details. Now, let's add some evidence.",
    edit_prompt: "Of course. Let's make corrections. Please describe the issue again from the beginning, including any changes you'd like to make.",
    geminiError: "I'm sorry, I'm having trouble connecting to my AI services. Please try again in a moment.",
    completed: "Thank you for sharing this issue. Your report has been recorded.",
    generatingSummary: "Generating AI Summary...",
    evidenceTitle: "Live Evidence Photo Capture",
    evidenceDescription: "Please add up to 3 photos. ({0}/3)",
    truthDetectorTitle: "AI Truth Detector ЁЯХ╡я╕ПтАНтЩВя╕П",
    truthDetectorDescription: "Each photo is automatically analyzed to detect manipulation or AI generation, ensuring the authenticity of evidence.",
    emotionTitle: "New! Emotion Recognition ЁЯШКЁЯШбЁЯШн",
    emotionDescription: "If you submit a voice recording with your report, our AI can detect frustration or urgency in your tone. High-emotion cases may be prioritized for faster escalation.",
    next: "Next",
    skip: "Skip",
    submit: "Submit",
    submitReport: "Submit Report",
    notApplicable: "Not applicable",
    egMainStreet: "e.g., Main Street",
    egOldTemple: "e.g., Near the old temple",
    issueTitlePlaceholder: "e.g., Large pothole on Main Street",
    describeIssuePlaceholder: "Describe the issue in detail...",
    langCode: 'en-US',
    listening: 'Listening...',
    speechError: 'Sorry, I couldn\'t find a match for "{0}". Please try again or select from the list.',
  },
  ta: {
    welcome: "ро╡рогроХрпНроХроорпН. роиро╛ройрпН роЖро░рпНропро╛, роЪро┐ро╡ро┐роХрпН роХро╛ро░рпНроЯро┐ройрпН AI роЪроорпВроХ роЪрпЗро╡рпИ роЖропрпНро╡ро╛ро│ро░рпН. роирпАроЩрпНроХро│рпН рокрпБроХро╛ро░ро│ро┐роХрпНроХрпБроорпН роЪро┐роХрпНроХро▓рпИрокрпН роЖро╡рогрокрпНрокроЯрпБродрпНрод роиро╛ройрпН роЗроЩрпНроХрпБ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН. родрпКроЯроЩрпНроХ, роХрпАро┤рпЗ роЙроЩрпНроХро│рпН ро╡ро┐ро░рпБрокрпНрокрооро╛рой роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН.",
    district_prompt: "роирпАроЩрпНроХро│рпН роОроирпНрод рооро╛ро╡роЯрпНроЯродрпНродро┐ро▓рпН роЗро░рпБроирпНродрпБ рокрпБроХро╛ро░рпН родрпЖро░ро┐ро╡ро┐роХрпНроХро┐ро▒рпАро░рпНроХро│рпН?",
    panchayat_prompt: "родропро╡рпБроЪрпЖропрпНродрпБ роЙроЩрпНроХро│рпН рокроЮрпНроЪро╛ропродрпНродро┐ройрпН рокрпЖропро░рпИ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН.",
    village_prompt: "роЗроирпНрод рокро┐ро░роЪрпНроЪро┐ройрпИ роОроирпНрод роХро┐ро░ро╛роородрпНродро┐ро▓рпН роЙро│рпНро│родрпБ?",
    street_prompt: "родрпЖро░рпБ роЕро▓рпНро▓родрпБ рокроХрпБродро┐ропрпИ роЙро│рпНро│ро┐роЯрпБроЩрпНроХро│рпН.",
    landmark_prompt: "роЕро░рпБроХро┐ро▓рпБро│рпНро│ роТро░рпБ роЕроЯрпИропро╛ро│ роЗроЯродрпНродрпИ роЪрпЗро░рпНроХрпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│ро╛? (ро╡ро┐ро░рпБрокрпНрокродрпНродрпЗро░рпНро╡рпБ)",
    title_prompt: "рокро┐ро░роЪрпНроЪро┐ройрпИроХрпНроХрпБ роТро░рпБ роЪрпБро░рпБроХрпНроХрооро╛рой родро▓рпИрокрпНрокрпИ роХрпКроЯрпБроЩрпНроХро│рпН.",
    category_prompt: "рокро┐ро░роЪрпНроЪро┐ройрпИ ро╡роХрпИропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН. роЙродро╛ро░рогроорпН: роЪро╛ро▓рпИроХро│рпН, родрогрпНрогрпАро░рпН, рооро┐ройрпНроЪро╛ро░роорпН.",
    urgency_prompt: "роЗроирпНрод рокро┐ро░роЪрпНроЪро┐ройрпИ роОро╡рпНро╡ро│ро╡рпБ роЕро╡роЪро░рооро╛ройродрпБ? (роХрпБро▒рпИро╡рпБ / роироЯрпБродрпНродро░роорпН / роЕродро┐роХроорпН)",
    description_prompt: "родропро╡рпБроЪрпЖропрпНродрпБ рокро┐ро░роЪрпНроЪро┐ройрпИропрпИ ро╡ро┐ро░ро┐ро╡ро╛роХ ро╡ро┐ро╡ро░ро┐роХрпНроХро╡рпБроорпН.",
    evidence_prompt_message: "ро╡ро┐ро╡ро░роЩрпНроХро│рпБроХрпНроХрпБ роиройрпНро▒ро┐. роЗрокрпНрокрпЛродрпБ, роЪро┐ро▓ роЖродро╛ро░роЩрпНроХро│рпИроЪрпН роЪрпЗро░рпНрокрпНрокрпЛроорпН.",
    edit_prompt: "роиро┐роЪрпНроЪропрооро╛роХ. родро┐ро░рпБродрпНродроЩрпНроХро│рпН роЪрпЖропрпНро╡рпЛроорпН. роирпАроЩрпНроХро│рпН роЪрпЖропрпНроп ро╡ро┐ро░рпБроорпНрокрпБроорпН рооро╛ро▒рпНро▒роЩрпНроХро│рпН роЙроЯрпНрокроЯ, роЪро┐роХрпНроХро▓рпИ роорпАрогрпНроЯрпБроорпН роорпБродро▓ро┐ро▓рпН роЗро░рпБроирпНродрпБ ро╡ро┐ро╡ро░ро┐роХрпНроХро╡рпБроорпН.",
    geminiError: "рооройрпНройро┐роХрпНроХро╡рпБроорпН, роОройродрпБ AI роЪрпЗро╡рпИроХро│рпБроЯройрпН роЗрогрпИро╡родро┐ро▓рпН роЪро┐роХрпНроХро▓рпН роЙро│рпНро│родрпБ. роЪро┐ро▒ро┐родрпБ роирпЗро░родрпНродро┐ро▓рпН роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.",
    completed: "роЗроирпНродроЪрпН роЪро┐роХрпНроХро▓рпИрокрпН рокроХро┐ро░рпНроирпНродроорпИроХрпНроХрпБ роиройрпНро▒ро┐. роЙроЩрпНроХро│рпН роЕро▒ро┐роХрпНроХрпИ рокродро┐ро╡рпБ роЪрпЖропрпНропрокрпНрокроЯрпНроЯрпБро│рпНро│родрпБ.",
    generatingSummary: "AI роЪрпБро░рпБроХрпНроХроорпН роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ...",
    evidenceTitle: "роирпЗро░роЯро┐ роЖродро╛ро░рокрпН рокрпБроХрпИрокрпНрокроЯрокрпН рокро┐роЯро┐рокрпНрокрпБ",
    evidenceDescription: "родропро╡рпБроЪрпЖропрпНродрпБ 3 рокрпБроХрпИрокрпНрокроЯроЩрпНроХро│рпН ро╡ро░рпИ роЪрпЗро░рпНроХрпНроХро╡рпБроорпН. ({0}/3)",
    truthDetectorTitle: "AI роЙрогрпНроорпИ роХрогрпНроЯро▒ро┐родро▓рпН ЁЯХ╡я╕ПтАНтЩВя╕П",
    truthDetectorDescription: "роТро╡рпНро╡рпКро░рпБ рокрпБроХрпИрокрпНрокроЯроорпБроорпН родро╛ройро╛роХро╡рпЗ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНропрокрпНрокроЯрпНроЯрпБ, роЖродро╛ро░роЩрпНроХро│ро┐ройрпН роироорпНрокроХродрпНродройрпНроорпИропрпИ роЙро▒рпБродро┐ роЪрпЖропрпНроХро┐ро▒родрпБ.",
    emotionTitle: "рокрпБродро┐ропродрпБ! роЙрогро░рпНроЪрпНроЪро┐ роЕроЩрпНроХрпАроХро╛ро░роорпН ЁЯШКЁЯШбЁЯШн",
    emotionDescription: "роЙроЩрпНроХро│рпН роЕро▒ро┐роХрпНроХрпИропрпБроЯройрпН роХрпБро░ро▓рпН рокродро┐ро╡рпИроЪрпН роЪрооро░рпНрокрпНрокро┐родрпНродро╛ро▓рпН, роОроЩрпНроХро│рпН AI роЙроЩрпНроХро│рпН роХрпБро░ро▓ро┐ро▓рпН роЙро│рпНро│ ро╡ро┐ро░роХрпНродро┐ роЕро▓рпНро▓родрпБ роЕро╡роЪро░родрпНродрпИроХрпН роХрогрпНроЯро▒ро┐ропрпБроорпН. роЕродро┐роХ роЙрогро░рпНроЪрпНроЪро┐ропрпБро│рпНро│ ро╡ро┤роХрпНроХрпБроХро│рпН ро╡ро┐ро░рпИро╡ро╛рой роироЯро╡роЯро┐роХрпНроХрпИроХрпНроХрпБ роорпБройрпНройрпБро░ро┐роорпИ роЕро│ро┐роХрпНроХрокрпНрокроЯро▓ро╛роорпН.",
    next: "роЕроЯрпБродрпНродрпБ",
    skip: "родро╡ро┐ро░рпН",
    submit: "роЪрооро░рпНрокрпНрокро┐",
    submitReport: "роЕро▒ро┐роХрпНроХрпИропрпИ роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН",
    notApplicable: "рокрпКро░рпБроирпНродро╛родрпБ",
    egMainStreet: "роО.роХро╛., рокро┐ро░родро╛рой родрпЖро░рпБ",
    egOldTemple: "роО.роХро╛., рокро┤рпИроп роХрпЛро╡ро┐ро▓рпБроХрпНроХрпБ роЕро░рпБроХро┐ро▓рпН",
    issueTitlePlaceholder: "роО.роХро╛., рокро┐ро░родро╛рой родрпЖро░рпБро╡ро┐ро▓рпН рокрпЖро░ро┐роп рокро│рпНро│роорпН",
    describeIssuePlaceholder: "роЪро┐роХрпНроХро▓рпИ ро╡ро┐ро░ро┐ро╡ро╛роХ ро╡ро┐ро╡ро░ро┐роХрпНроХро╡рпБроорпН...",
    langCode: 'ta-IN',
    listening: 'роХрпЗроЯрпНроХро┐ро▒родрпБ...',
    speechError: 'рооройрпНройро┐роХрпНроХро╡рпБроорпН, "{0}"роХрпНроХрпБ рокрпЖро╛ро░рпБродрпНродроорпН роХро╛рогрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН роЕро▓рпНро▓родрпБ рокроЯрпНроЯро┐ропро▓ро┐ро▓ро┐ро░рпБроирпНродрпБ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН.',
  },
  hi: {
    welcome: "рдирдорд╕реНрддреЗред рдореИрдВ рдЖрд░реНрдпрд╛, рд╕рд┐рд╡рд┐рдХрдЧрд╛рд░реНрдб рдХреА рдПрдХ рдПрдЖрдИ рд╕рд╛рдорд╛рдЬрд┐рдХ рд╕реЗрд╡рд╛ рдЕрдиреНрд╡реЗрд╖рдХ рд╣реВрдБред рдореИрдВ рдЖрдкрдХреА рд░рд┐рдкреЛрд░реНрдЯ рдХреА рдЧрдИ рд╕рдорд╕реНрдпрд╛ рдХрд╛ рджрд╕реНрддрд╛рд╡реЗрдЬреАрдХрд░рдг рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБред рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдиреАрдЪреЗ рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВред",
    district_prompt: "рдЖрдк рдХрд┐рд╕ рдЬрд╝рд┐рд▓реЗ рд╕реЗ рд░рд┐рдкреЛрд░реНрдЯ рдХрд░ рд░рд╣реЗ рд╣реИрдВ?",
    panchayat_prompt: "рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рдкрдВрдЪрд╛рдпрдд рдХрд╛ рдирд╛рдо рдмрддрд╛рдЗрдПред",
    village_prompt: "рдпрд╣ рд╕рдорд╕реНрдпрд╛ рдХрд┐рд╕ рдЧрд╛рдБрд╡ рдореЗрдВ рд╣реИ?",
    street_prompt: "рдЧрд▓реА рдпрд╛ рдХреНрд╖реЗрддреНрд░ рдХрд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВред",
    landmark_prompt: "рдХреНрдпрд╛ рдЖрдк рдкрд╛рд╕ рдХрд╛ рдХреЛрдИ рд▓реИрдВрдбрдорд╛рд░реНрдХ рдЬреЛрдбрд╝рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ? (рд╡реИрдХрд▓реНрдкрд┐рдХ)",
    title_prompt: "рд╕рдорд╕реНрдпрд╛ рдХреЗ рд▓рд┐рдП рдПрдХ рдЫреЛрдЯрд╛ рд╢реАрд░реНрд╖рдХ рджреАрдЬрд┐рдПред",
    category_prompt: "рд╕рдорд╕реНрдпрд╛ рдХрд╛ рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВред рдЙрджрд╛рд╣рд░рдг: рд╕рдбрд╝рдХреЗрдВ, рдкрд╛рдиреА, рдмрд┐рдЬрд▓реАред",
    urgency_prompt: "рдпрд╣ рд╕рдорд╕реНрдпрд╛ рдХрд┐рддрдиреА рдЬрд╝рд░реВрд░реА рд╣реИ? (рдХрдо / рдордзреНрдпрдо / рдЕрдзрд┐рдХ)",
    description_prompt: "рдХреГрдкрдпрд╛ рд╕рдорд╕реНрдпрд╛ рдХрд╛ рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рд╡рд░реНрдгрди рдХрд░реЗрдВред",
    evidence_prompt_message: "рд╡рд┐рд╡рд░рдг рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рдЕрдм, рдХреБрдЫ рд╕рдмреВрдд рдЬреЛрдбрд╝рддреЗ рд╣реИрдВред",
    edit_prompt: "рдмреЗрд╢рдХред рд╕реБрдзрд╛рд░ рдХрд░рддреЗ рд╣реИрдВред рдХреГрдкрдпрд╛ рдЖрдк рдЬреЛ рднреА рдмрджрд▓рд╛рд╡ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ, рдЙрдиреНрд╣реЗрдВ рд╢рд╛рдорд┐рд▓ рдХрд░рддреЗ рд╣реБрдП, рд╕рдорд╕реНрдпрд╛ рдХрд╛ рдлрд┐рд░ рд╕реЗ рд╢реБрд░реВ рд╕реЗ рд╡рд░реНрдгрди рдХрд░реЗрдВред",
    geminiError: "рдореБрдЭреЗ рдЦреЗрдж рд╣реИ, рдореБрдЭреЗ рдЕрдкрдиреА рдПрдЖрдИ рд╕реЗрд╡рд╛рдУрдВ рд╕реЗ рдЬреБрдбрд╝рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реЛ рд░рд╣реА рд╣реИред рдХреГрдкрдпрд╛ рдХреБрдЫ рджреЗрд░ рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
    completed: "рдЗрд╕ рдореБрджреНрджреЗ рдХреЛ рд╕рд╛рдЭрд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рдЖрдкрдХреА рд░рд┐рдкреЛрд░реНрдЯ рджрд░реНрдЬ рдХрд░ рд▓реА рдЧрдИ рд╣реИред",
    generatingSummary: "рдПрдЖрдИ рд╕рд╛рд░рд╛рдВрд╢ рдЙрддреНрдкрдиреНрди рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
    evidenceTitle: "рд▓рд╛рдЗрд╡ рд╕рд╛рдХреНрд╖реНрдп рдлреЛрдЯреЛ рдХреИрдкреНрдЪрд░",
    evidenceDescription: "рдХреГрдкрдпрд╛ 3 рдлрд╝реЛрдЯреЛ рддрдХ рдЬреЛрдбрд╝реЗрдВред ({0}/3)",
    truthDetectorTitle: "рдПрдЖрдИ рд╕рддреНрдп рдбрд┐рдЯреЗрдХреНрдЯрд░ ЁЯХ╡я╕ПтАНтЩВя╕П",
    truthDetectorDescription: "рдкреНрд░рддреНрдпреЗрдХ рддрд╕реНрд╡реАрд░ рдХрд╛ рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд░реВрдк рд╕реЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ рддрд╛рдХрд┐ рд╣реЗрд░рдлреЗрд░ рдпрд╛ рдПрдЖрдИ рджреНрд╡рд╛рд░рд╛ рдирд┐рд░реНрдорд╛рдг рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рдпрд╛ рдЬрд╛ рд╕рдХреЗ, рдЬрд┐рд╕рд╕реЗ рд╕рд╛рдХреНрд╖реНрдп рдХреА рдкреНрд░рд╛рдорд╛рдгрд┐рдХрддрд╛ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рд╣реЛ рд╕рдХреЗред",
    emotionTitle: "рдирдпрд╛! рднрд╛рд╡рдирд╛ рдкрд╣рдЪрд╛рди ЁЯШКЁЯШбЁЯШн",
    emotionDescription: "рдпрджрд┐ рдЖрдк рдЕрдкрдиреА рд░рд┐рдкреЛрд░реНрдЯ рдХреЗ рд╕рд╛рде рд╡реЙрдпрд╕ рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рдЬрдорд╛ рдХрд░рддреЗ рд╣реИрдВ, рддреЛ рд╣рдорд╛рд░рд╛ AI рдЖрдкрдХреА рдЖрд╡рд╛рдЬрд╝ рдореЗрдВ рдирд┐рд░рд╛рд╢рд╛ рдпрд╛ рддрд╛рддреНрдХрд╛рд▓рд┐рдХрддрд╛ рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛ рд╕рдХрддрд╛ рд╣реИред рдЙрдЪреНрдЪ-рднрд╛рд╡рдирд╛ рд╡рд╛рд▓реЗ рдорд╛рдорд▓реЛрдВ рдХреЛ рддреЗрдЬреА рд╕реЗ рд╕рдорд╛рдзрд╛рди рдХреЗ рд▓рд┐рдП рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рджреА рдЬрд╛ рд╕рдХрддреА рд╣реИред",
    next: "рдЕрдЧрд▓рд╛",
    skip: "рдЫреЛрдбрд╝реЗрдВ",
    submit: "рдкреНрд░рд╕реНрддреБрдд рдХрд░реЗрдВ",
    submitReport: "рд░рд┐рдкреЛрд░реНрдЯ рдЬрдорд╛ рдХрд░реЗрдВ",
    notApplicable: "рд▓рд╛рдЧреВ рдирд╣реАрдВ",
    egMainStreet: "рдЬреИрд╕реЗ, рдореБрдЦреНрдп рд╕рдбрд╝рдХ",
    egOldTemple: "рдЬреИрд╕реЗ, рдкреБрд░рд╛рдиреЗ рдордВрджрд┐рд░ рдХреЗ рдкрд╛рд╕",
    issueTitlePlaceholder: "рдЬреИрд╕реЗ, рдореБрдЦреНрдп рд╕рдбрд╝рдХ рдкрд░ рдмрдбрд╝рд╛ рдЧрдбреНрдврд╛",
    describeIssuePlaceholder: "рд╕рдорд╕реНрдпрд╛ рдХрд╛ рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рд╡рд░реНрдгрди рдХрд░реЗрдВ...",
    langCode: 'hi-IN',
    listening: 'рд╕реБрди рд░рд╣рд╛ рд╣реИ...',
    speechError: 'рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдореБрдЭреЗ "{0}" рдХреЗ рд▓рд┐рдП рдХреЛрдИ рдореЗрд▓ рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ рдпрд╛ рд╕реВрдЪреА рд╕реЗ рдЪрдпрди рдХрд░реЗрдВред',
  }
};

const FormSection: React.FC<{title: string, children: React.ReactNode, description?: string}> = ({title, children, description}) => (
    <div>
        <h3 className="text-xl font-semibold text-gray-800 dark:text-gray-200 border-b border-gray-300 dark:border-gray-600 pb-2 mb-4">{title}</h3>
        {description && <p className="text-sm text-gray-500 dark:text-gray-400 mb-4">{description}</p>}
        {children}
    </div>
);

const stageOrder: ConversationStage[] = ['district', 'panchayat', 'village', 'street', 'landmark', 'title', 'category', 'urgency', 'description', 'evidence'];

const ReporterAgent: React.FC<ReporterAgentProps> = ({ onBack, onSubmit, user }) => {
  const [stage, setStage] = useState<ConversationStage>('language');
  const [language, setLanguage] = useState<Language>('en');
  const [finalReport, setFinalReport] = useState<any | null>(null);
  const [conversation, setConversation] = useState<{ role: 'bot' | 'user'; content: string }[]>([]);

  const T = translations[language];
  
  // Location state
  const [districtNames, setDistrictNames] = useState<string[]>([]);
  const [panchayatOptions, setPanchayatOptions] = useState<string[]>([]);
  const [villageOptions, setVillageOptions] = useState<string[]>([]);
  const [selectedDistrictData, setSelectedDistrictData] = useState<District | null>(null);

  // Form state
  const [district, setDistrict] = useState<string>(user.district || '');
  const [panchayat, setPanchayat] = useState<string>(user.panchayat || '');
  const [village, setVillage] = useState<string>(user.village || '');
  const [street, setStreet] = useState<string>(user.street || '');
  const [landmark, setLandmark] = useState('');
  const [title, setTitle] = useState('');
  const [category, setCategory] = useState('Roads');
  const [urgency, setUrgency] = useState<'Low' | 'Medium' | 'High'>('Medium');
  const [description, setDescription] = useState('');
  
  // Evidence state
  const [evidenceList, setEvidenceList] = useState<Evidence[]>([]);
  const [selectedPhoto, setSelectedPhoto] = useState<string | null>(null);
  const [audioEvidence, setAudioEvidence] = useState<{ blob: Blob, dataURL: string } | null>(null);
  const [videoEvidence, setVideoEvidence] = useState<string | null>(null);
  const [videoGps, setVideoGps] = useState<{ lat: number; lng: number; accuracy: number } | null>(null);
  
  // Voice state
  const [isTtsEnabled, setIsTtsEnabled] = useState(true);
  const [isListening, setIsListening] = useState(false);
  const recognitionRef = useRef<any>(null);

  const allAnalysesDone = useMemo(() => evidenceList.every(e => e.analysis !== 'pending'), [evidenceList]);
  const conversationContentRef = useRef<HTMLDivElement>(null);

  const speak = useCallback(async (text: string, langCodeOverride?: string) => {
    if (!isTtsEnabled || !('speechSynthesis' in window) || !text.trim()) return;
    window.speechSynthesis.cancel();
    
    try {
        const voices = await getVoices();
        const utterance = new SpeechSynthesisUtterance(text);
        const targetLang = langCodeOverride || T.langCode;
        const normalizedTargetLang = targetLang.replace('_', '-').toLowerCase();
        
        const voice = voices.find(v => v.lang.replace('_', '-').toLowerCase() === normalizedTargetLang);
        if (voice) utterance.voice = voice;
        else console.warn(`TTS voice for '${targetLang}' not found. Using default.`);
        
        utterance.lang = targetLang;
        window.speechSynthesis.speak(utterance);
    } catch (error) { console.error("TTS error:", error); }
  }, [isTtsEnabled, T.langCode]);

  useEffect(() => {
    conversationContentRef.current?.scrollTo(0, conversationContentRef.current.scrollHeight);
  }, [conversation]);

  // Speech Recognition Setup
  useEffect(() => {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      if (!SpeechRecognition) { console.warn("Speech recognition not supported."); return; }
      
      const recognition = new SpeechRecognition();
      recognition.continuous = false;
      recognition.interimResults = true;
      recognition.lang = T.langCode;
      
      recognition.onresult = (event: any) => {
          const transcript = event.results[event.results.length - 1][0].transcript;
          const isFinal = event.results[event.results.length - 1].isFinal;
          
          switch(stage) {
            case 'street': setStreet(transcript); break;
            case 'landmark': setLandmark(transcript); break;
            case 'title': setTitle(transcript); break;
            case 'description': setDescription(transcript); break;
          }

          if (isFinal) {
              handleSpeechRecognitionResult(transcript.trim());
          }
      };
      
      recognition.onend = () => setIsListening(false);
      recognition.onerror = (event: any) => { console.error("Speech recognition error:", event.error); setIsListening(false); };
      recognitionRef.current = recognition;

      return () => {
        recognition.stop();
        if ('speechSynthesis' in window) window.speechSynthesis.cancel();
      };
  }, [T.langCode, stage]); // Re-initialize if language or stage changes

  useEffect(() => {
    getDistrictNames().then(names => { setDistrictNames(names); if (!user.district && names.length > 0) setDistrict(names[0]); });
  }, [user.district]);
  
  useEffect(() => {
    if (!district) { setSelectedDistrictData(null); return; }
    getDistrictData(district).then(data => setSelectedDistrictData(data));
  }, [district]);

  useEffect(() => {
    const panchayatNames = selectedDistrictData?.panchayats?.map(p => p.name) || [];
    setPanchayatOptions(panchayatNames);
     if (panchayatNames.length > 0 && (!user.panchayat || !panchayatNames.includes(user.panchayat))) setPanchayat(panchayatNames[0]);
  }, [selectedDistrictData, user.panchayat]);
  
  useEffect(() => {
    if (!panchayat) { setVillageOptions([]); setVillage(''); return; }
    const selectedPanchayat = selectedDistrictData?.panchayats?.find(p => p.name === panchayat);
    const villageNames = selectedPanchayat?.villages || [];
    setVillageOptions(villageNames);
    if (villageNames.length > 0 && (!user.village || !villageNames.includes(user.village))) setVillage(villageNames[0]);
  }, [panchayat, selectedDistrictData, user.village]);

  const handleLanguageSelect = (lang: Language) => {
    setLanguage(lang);
    setStage('district');
    const welcomeMsg = translations[lang].district_prompt;
    setConversation([{ role: 'bot', content: welcomeMsg }]);
    speak(welcomeMsg, translations[lang].langCode);
  };
  
  const handleAdvance = useCallback((e: React.FormEvent | null, value: string, skipped = false) => {
    e?.preventDefault();
    const currentStageIndex = stageOrder.indexOf(stage);

    if (stage === 'street' && !street.trim()) { alert('Street/Locality is required.'); return; }
    if (stage === 'title' && !title.trim()) { alert('Issue title is required.'); return; }
    if (stage === 'description' && !description.trim()) { alert('Description is required.'); return; }
    
    setConversation(prev => [...prev, { role: 'user', content: skipped ? '(Skipped)' : value }]);

    if (currentStageIndex < stageOrder.length - 1) {
        const nextStage = stageOrder[currentStageIndex + 1];
        setStage(nextStage);
        const nextPromptKey = `${nextStage}_prompt` as keyof typeof T;
        const nextPrompt = T[nextPromptKey] || T.evidence_prompt_message;
        setTimeout(() => {
             setConversation(prev => [...prev, { role: 'bot', content: nextPrompt }]);
             speak(nextPrompt);
        }, 300);
    }
  }, [stage, T, street, title, description, speak]);

  const findBestMatch = (query: string, options: string[]): string | null => {
      const lowerQuery = query.toLowerCase().trim();
      const exactMatch = options.find(opt => opt.toLowerCase() === lowerQuery);
      if (exactMatch) return exactMatch;
      const includesMatch = options.find(opt => opt.toLowerCase().includes(lowerQuery));
      if (includesMatch) return includesMatch;
      return null;
  };

  const handleSpeechRecognitionResult = (transcript: string) => {
      if (!transcript) return;
      let advance = false;
      let userMessage = transcript;

      const findAndSet = (query: string, options: string[], setter: (val: any) => void): boolean => {
          const match = findBestMatch(query, options);
          if(match) {
              setter(match);
              userMessage = match;
              return true;
          }
          speak(T.speechError.replace('{0}', query));
          return false;
      };

      switch (stage) {
          case 'district': advance = findAndSet(transcript, districtNames, setDistrict); break;
          case 'panchayat': advance = findAndSet(transcript, panchayatOptions, setPanchayat); break;
          case 'village': advance = findAndSet(transcript, villageOptions, setVillage); break;
          case 'category': advance = findAndSet(transcript, ['Roads', 'Waste', 'Water', 'Electricity', 'Public Infrastructure', 'Other'], setCategory); break;
          case 'urgency': advance = findAndSet(transcript, ['Low', 'Medium', 'High'], setUrgency); break;
          case 'street': setStreet(transcript); advance = true; break;
          case 'landmark': setLandmark(transcript); advance = true; break;
          case 'title': setTitle(transcript); advance = true; break;
          case 'description': setDescription(transcript); advance = true; break;
      }
      if (advance) {
          handleAdvance(null, userMessage);
      }
  };

  const handleMicClick = () => {
      if (!recognitionRef.current) return;
      if (isListening) {
          recognitionRef.current.stop();
      } else {
          recognitionRef.current.start();
          setIsListening(true);
      }
  };

  const handleToggleTts = () => {
    const newState = !isTtsEnabled;
    setIsTtsEnabled(newState);
    if (!newState) window.speechSynthesis.cancel();
  };

  const analyzeImage = async (photoDataUrl: string, index: number) => {
    const base64Image = photoDataUrl.split(',')[1];
    const result = await analyzeImageAuthenticity(base64Image);
    setEvidenceList(prevList => {
        const updatedList = [...prevList];
        if (updatedList[index]) { updatedList[index].analysis = result; }
        return updatedList;
    });
  };

  const handleEvidenceCapture = (data: { photo: string; gps: any; timestamp: string; }) => {
    if (evidenceList.length < 3) {
        const newEvidence: Evidence = { ...data, analysis: 'pending' };
        const newEvidenceList = [...evidenceList, newEvidence];
        setEvidenceList(newEvidenceList);
        analyzeImage(data.photo, newEvidenceList.length - 1);
    }
  };

  const removeEvidence = (index: number) => setEvidenceList(prevList => prevList.filter((_, i) => i !== index));
  
  const handleVideoDataChange = (data: { videoURL: string | null; gps: { lat: number; lng: number; accuracy: number } | null }) => {
    setVideoEvidence(data.videoURL);
    setVideoGps(data.gps);
  };

  const handleGenerateSummary = async () => {
    if (evidenceList.length === 0 || !videoEvidence) {
        alert('Please capture at least one photo and record a video as evidence.');
        return;
    }
    setStage('processing');

    let emotionAnalysisResult: { sentiment: string; urgencyScore: number } | null = null;
    if (audioEvidence) {
        try {
            const audioPart = { inlineData: { mimeType: audioEvidence.blob.type, data: audioEvidence.dataURL.split(',')[1] } };
            const textPart = { text: "Analyze the user's voice in this audio clip. Describe their emotional state (e.g., calm, frustrated, angry, distressed). Based on their tone, rate the urgency of the issue on a scale from 1 (very low) to 10 (very high). Return ONLY a JSON object with 'sentiment' (string) and 'urgencyScore' (number) keys." };
            const response = await ai.models.generateContent({
                model: 'gemini-2.5-flash', contents: { parts: [audioPart, textPart] },
                config: {
                    responseMimeType: "application/json",
                    responseSchema: { type: Type.OBJECT, properties: { sentiment: { type: Type.STRING }, urgencyScore: { type: Type.NUMBER } }, required: ["sentiment", "urgencyScore"] },
                },
            });
            emotionAnalysisResult = JSON.parse(response.text.trim());
        } catch(err) { console.error("Emotion analysis failed:", err); }
    }

    const reportText = `Issue Report:\n- Title: ${title}\n- Category: ${category}\n- Urgency: ${urgency}\nLocation:\n- District: ${district}\n- Panchayat: ${panchayat}\n- Village: ${village}\n- Street/Locality: ${street}\n- Landmark (optional): ${landmark || 'Not provided'}\nDescription:\n- ${description}`;

    try {
      const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash', contents: reportText,
        config: {
          systemInstruction: "You are an AI assistant for a civic reporting app. Your task is to process a user's raw text report about a local issue and convert it into a structured, official summary. The user will provide details like location, category, urgency, and a description. You MUST return ONLY a JSON object with the following exact schema: { \"reporterDetails\": \"string\", \"issueDescription\": \"string\", \"district\": \"string\", \"panchayat\": \"string\", \"village\": \"string\", \"street\": \"string\", \"locationDetails\": \"string\", \"dateTime\": \"string\", \"affectedPeopleCommunity\": \"string\", \"urgencyLevel\": \"'Low' | 'Medium' | 'High'\", \"finalSummaryRecommendation\": \"string\" }. Use the user's input to fill these fields. For 'reporterDetails', combine the provided contact info or state 'Not provided'. For 'dateTime', use the current date and time in a readable format (e.g., 'July 26, 2024, 10:30 AM'). For 'affectedPeopleCommunity', infer from the description (e.g., 'Local residents', 'Commuters'). For 'urgencyLevel', use the user's selection but you may upgrade it to 'High' if the description contains keywords like 'dangerous', 'hazard', 'urgent', 'fire', 'accident'. For 'finalSummaryRecommendation', write a concise, one-sentence summary of the issue and a recommended action (e.g., 'A large pothole on Main Street requires immediate repair to prevent accidents.'). Be professional and clear.",
          responseMimeType: "application/json",
          responseSchema: {
            type: Type.OBJECT,
            properties: { reporterDetails: { type: Type.STRING }, issueDescription: { type: Type.STRING }, district: { type: Type.STRING }, panchayat: { type: Type.STRING }, village: { type: Type.STRING }, street: { type: Type.STRING }, locationDetails: { type: Type.STRING }, dateTime: { type: Type.STRING }, affectedPeopleCommunity: { type: Type.STRING }, urgencyLevel: { type: Type.STRING }, finalSummaryRecommendation: { type: Type.STRING }},
            required: ["issueDescription", "district", "panchayat", "village", "street", "dateTime", "affectedPeopleCommunity", "urgencyLevel", "finalSummaryRecommendation"]
          }
        }
      });
      const generatedReport = JSON.parse(response.text.trim());
      let gpsData = evidenceList.find(e => e.gps)?.gps || videoGps || null;
      if (!gpsData && navigator.geolocation) {
        try {
            const pos = await new Promise<GeolocationPosition>((resolve, reject) => navigator.geolocation.getCurrentPosition(resolve, reject, { enableHighAccuracy: false, timeout: 8000 }));
            gpsData = { lat: pos.coords.latitude, lng: pos.coords.longitude, accuracy: pos.coords.accuracy };
        } catch (err) { console.warn("Final GPS fallback failed in AI agent:", err); }
      }

      setFinalReport({ ...generatedReport, title: title, emotionAnalysis: emotionAnalysisResult, imageAnalyses: evidenceList.map(e => e.analysis).filter(a => a !== 'pending' && a), _photos: evidenceList.map(e => e.photo), _gps: gpsData, _audioURL: audioEvidence?.dataURL, _videoURL: videoEvidence, category: category });
      setStage('summary');
    } catch (error) { console.error("Gemini API error:", error); alert(T.geminiError); setStage('evidence'); }
  };
  
  const handleConfirmReport = () => { onSubmit(finalReport); setStage('completed'); };
  const handleEditReport = () => { setStage('district'); setConversation([{ role: 'bot', content: T.district_prompt }]); };
  
  const AnalysisBadge: React.FC<{ analysis?: AnalysisStatus | 'pending' }> = ({ analysis }) => {
    if (!analysis) return null;
    const wrapperClasses = "absolute bottom-1 right-1 bg-black/50 rounded-full p-1 text-white flex items-center justify-center";
    if (analysis === 'pending') return <div className={wrapperClasses} title="Verifying..."><SpinnerIcon /></div>;
    const { status, confidence, reasoning } = analysis;
    const title = `${status} (Confidence: ${(confidence * 100).toFixed(0)}%) - ${reasoning}`;
    switch (status) {
        case 'Authentic': return <div className={wrapperClasses} title={title}><CheckCircleIcon className="w-5 h-5 text-green-400" /></div>;
        case 'Manipulated': return <div className={wrapperClasses} title={title}><ExclamationTriangleIcon className="w-5 h-5 text-yellow-400" /></div>;
        case 'AI-Generated': return <div className={wrapperClasses} title={title}><RobotIcon className="w-5 h-5 text-red-400" /></div>;
        default: return null;
    }
  };

  const renderContent = () => {
    const currentStageIndex = stageOrder.indexOf(stage);
    const progress = currentStageIndex >= 0 ? ((currentStageIndex) / (stageOrder.length - 2)) * 100 : 0;
    
    const renderConversationInput = () => {
        const MicButton = () => (
            <button type="button" onClick={handleMicClick} className={`p-2 rounded-full ${isListening ? 'bg-red-200 text-red-600 animate-pulse' : 'bg-gray-200 text-gray-700 dark:bg-gray-600 dark:text-gray-200'}`} aria-label={isListening ? "Stop listening" : "Start listening"}>
                <MicIcon className="w-5 h-5"/>
            </button>
        );

        switch(stage) {
            case 'district': return (<form onSubmit={e => handleAdvance(e, district)} className="flex gap-2 items-center"><select value={district} onChange={e => setDistrict(e.target.value)} className="flex-grow p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-gray-50 dark:bg-gray-700">{districtNames.map(d => <option key={d} value={d}>{d}</option>)}</select><MicButton /><button type="submit" className="px-4 py-2 bg-indigo-600 text-white rounded-md">{T.next}</button></form>);
            case 'panchayat': return (<form onSubmit={e => handleAdvance(e, panchayat)} className="flex gap-2 items-center"><select value={panchayat} onChange={e => setPanchayat(e.target.value)} className="flex-grow p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-gray-50 dark:bg-gray-700">{panchayatOptions.length > 0 ? panchayatOptions.map(p => <option key={p} value={p}>{p}</option>) : <option>{T.notApplicable}</option>}</select><MicButton /><button type="submit" className="px-4 py-2 bg-indigo-600 text-white rounded-md">{T.next}</button></form>);
            case 'village': return (<form onSubmit={e => handleAdvance(e, village)} className="flex gap-2 items-center"><select value={village} onChange={e => setVillage(e.target.value)} className="flex-grow p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-gray-50 dark:bg-gray-700">{villageOptions.length > 0 ? villageOptions.map(v => <option key={v} value={v}>{v}</option>) : <option>{T.notApplicable}</option>}</select><MicButton /><button type="submit" className="px-4 py-2 bg-indigo-600 text-white rounded-md">{T.next}</button></form>);
            case 'street': return (<form onSubmit={e => handleAdvance(e, street)} className="flex gap-2 items-center"><input type="text" value={street} onChange={e => setStreet(e.target.value)} placeholder={isListening ? T.listening : T.egMainStreet} required className="flex-grow p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-gray-50 dark:bg-gray-700" /><MicButton /><button type="submit" className="px-4 py-2 bg-indigo-600 text-white rounded-md">{T.next}</button></form>);
            case 'landmark': return (<form onSubmit={e => handleAdvance(e, landmark)} className="flex gap-2 items-center"><input type="text" value={landmark} onChange={e => setLandmark(e.target.value)} placeholder={isListening ? T.listening : T.egOldTemple} className="flex-grow p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-gray-50 dark:bg-gray-700" /><MicButton /><button type="submit" className="px-4 py-2 bg-indigo-600 text-white rounded-md">{T.next}</button><button type="button" onClick={(e) => handleAdvance(e as any, landmark, true)} className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md">{T.skip}</button></form>);
            case 'title': return (<form onSubmit={e => handleAdvance(e, title)} className="flex gap-2 items-center"><input type="text" value={title} onChange={e => setTitle(e.target.value)} placeholder={isListening ? T.listening : T.issueTitlePlaceholder} required className="flex-grow p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-gray-50 dark:bg-gray-700" /><MicButton /><button type="submit" className="px-4 py-2 bg-indigo-600 text-white rounded-md">{T.next}</button></form>);
            case 'category': return (<form onSubmit={e => handleAdvance(e, category)} className="flex gap-2 items-center"><select value={category} onChange={e => setCategory(e.target.value)} className="flex-grow p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-gray-50 dark:bg-gray-700">{['Roads', 'Waste', 'Water', 'Electricity', 'Public Infrastructure', 'Other'].map(cat => <option key={cat} value={cat}>{cat}</option>)}</select><MicButton /><button type="submit" className="px-4 py-2 bg-indigo-600 text-white rounded-md">{T.next}</button></form>);
            case 'urgency': return (<form onSubmit={e => handleAdvance(e, urgency)} className="flex gap-2 items-center"><select value={urgency} onChange={e => setUrgency(e.target.value as any)} className="flex-grow p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-gray-50 dark:bg-gray-700"><option value="Low">Low</option><option value="Medium">Medium</option><option value="High">High</option></select><MicButton /><button type="submit" className="px-4 py-2 bg-indigo-600 text-white rounded-md">{T.next}</button></form>);
            case 'description': return (<form onSubmit={e => handleAdvance(e, description)} className="flex flex-col gap-2"><div className="flex gap-2 items-start"><textarea value={description} onChange={e => setDescription(e.target.value)} rows={3} placeholder={isListening ? T.listening : T.describeIssuePlaceholder} required className="flex-grow p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-gray-50 dark:bg-gray-700"></textarea><MicButton /></div><button type="submit" className="px-4 py-2 bg-indigo-600 text-white rounded-md self-end">{T.submit}</button></form>);
            default: return null;
        }
    };

    switch (stage) {
      case 'language': return (<div className="text-center p-8"><p className="mb-6">{T.welcome}</p><div className="flex justify-center gap-4"><button onClick={() => handleLanguageSelect('en')} className="px-6 py-2 border-2 border-indigo-500 text-indigo-500 font-bold rounded-lg hover:bg-indigo-500 hover:text-white transition">English</button><button onClick={() => handleLanguageSelect('ta')} className="px-6 py-2 border-2 border-indigo-500 text-indigo-500 font-bold rounded-lg hover:bg-indigo-500 hover:text-white transition">родрооро┐ро┤рпН</button><button onClick={() => handleLanguageSelect('hi')} className="px-6 py-2 border-2 border-indigo-500 text-indigo-500 font-bold rounded-lg hover:bg-indigo-500 hover:text-white transition">рд╣рд┐рдиреНрджреА</button></div></div>);
      case 'evidence': return (<div className="p-4 space-y-6 animate-fade-in"><FormSection title={T.evidenceTitle} description={T.evidenceDescription.replace('{0}', String(evidenceList.length))}><div className="mt-4 p-4 border border-gray-200 dark:border-gray-700 rounded-lg bg-gray-50 dark:bg-gray-900/50">{evidenceList.length > 0 && (<div className="grid grid-cols-3 gap-4 mb-4">{evidenceList.map((evidence, index) => (<div key={index} className="relative group"><img src={evidence.photo} alt={`Evidence ${index + 1}`} className="rounded-lg object-cover w-full h-24 cursor-pointer" onClick={() => setSelectedPhoto(evidence.photo)}/><AnalysisBadge analysis={evidence.analysis} /><button type="button" onClick={() => removeEvidence(index)} className="absolute top-1 right-1 bg-red-600 text-white rounded-full w-6 h-6 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity" aria-label="Remove photo">&times;</button></div>))}</div>)}{evidenceList.length < 3 ? <CameraCapture onCapture={handleEvidenceCapture} district={district} panchayat={panchayat} village={village} /> : <p className="text-center text-green-600 dark:text-green-400 font-semibold">Maximum number of photos reached.</p>}</div></FormSection><FormSection title={T.truthDetectorTitle} description={T.truthDetectorDescription} /><FormSection title="Record Video (Required)" description="A 30-second video of the issue is required. The recording will stop automatically after 30 seconds."><VideoRecorder onVideoChange={handleVideoDataChange} currentVideoUrl={videoEvidence} district={district} panchayat={panchayat} village={village} /></FormSection><FormSection title={T.emotionTitle} description={T.emotionDescription}><EmotionRecorder onRecordComplete={setAudioEvidence} /></FormSection><div className="mt-8 flex justify-end"><button type="button" onClick={handleGenerateSummary} className="w-full px-6 py-4 bg-indigo-600 text-white font-bold rounded-lg shadow hover:bg-indigo-700 disabled:bg-indigo-400 disabled:cursor-not-allowed" disabled={evidenceList.length === 0 || !videoEvidence || !allAnalysesDone}>{T.submitReport}</button></div>{selectedPhoto && (<div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4" onClick={() => setSelectedPhoto(null)}><div className="relative max-w-3xl max-h-[90vh]" onClick={(e) => e.stopPropagation()}><img src={selectedPhoto} alt="Evidence preview" className="rounded-lg object-contain w-full h-full" /><button onClick={() => setSelectedPhoto(null)} className="absolute -top-2 -right-2 bg-white text-black rounded-full w-8 h-8 flex items-center justify-center font-bold text-xl shadow-lg">&times;</button></div></div>)}</div>);
      case 'processing': return (<div className="flex flex-col items-center justify-center p-8 h-full"><SpinnerIcon /><p className="mt-4 text-lg text-gray-600 dark:text-gray-300">{T.generatingSummary}</p></div>);
      case 'summary': return finalReport ? (<ReportSummary issue={finalReport} onConfirm={handleConfirmReport} onEdit={handleEditReport} />) : null;
      case 'completed': return (<div className="text-center p-8"><h2 className="text-2xl font-bold mb-4">{T.completed}</h2><button onClick={onBack} className="px-6 py-2 bg-indigo-600 text-white font-bold rounded-lg shadow hover:bg-indigo-700">Done</button></div>);
      default: return (
        <div className="h-full flex flex-col p-4">
             <div className="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 mb-4">
                <div className="bg-indigo-600 h-2.5 rounded-full transition-all duration-500" style={{width: `${progress}%`}}></div>
            </div>
            <div ref={conversationContentRef} className="flex-1 space-y-4 overflow-y-auto mb-4">
                {conversation.map((msg, index) => (
                    <div key={index} className={`flex items-end gap-2 ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                       {msg.role === 'bot' && <div className="w-8 h-8 rounded-full bg-indigo-500 flex items-center justify-center text-white flex-shrink-0"><RobotIcon className="w-5 h-5" /></div>}
                       <div className={`max-w-xs lg:max-w-sm px-4 py-2 rounded-2xl animate-fade-in ${msg.role === 'user' ? 'bg-indigo-500 text-white rounded-br-none' : 'bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-bl-none'}`}>
                           <p className="text-sm" dangerouslySetInnerHTML={{ __html: msg.content }}></p>
                       </div>
                    </div>
                ))}
            </div>
            <div className="mt-auto pt-4 border-t border-gray-200 dark:border-gray-700">
                {renderConversationInput()}
            </div>
        </div>
      );
    }
  };

  return (
    <div className="flex h-full max-h-[85vh] flex-col bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
      <div className="flex items-center p-4 border-b border-gray-200 dark:border-gray-700">
        <button onClick={stage === 'summary' ? handleEditReport : onBack} className="flex items-center gap-2 text-indigo-600 dark:text-indigo-400 hover:underline">
          <ChevronLeftIcon />
          Back
        </button>
        <div className="flex-1" />
        <button onClick={handleToggleTts} className="p-2 rounded-full text-gray-500 hover:bg-gray-200 dark:hover:bg-gray-600" aria-label={isTtsEnabled ? "Disable text-to-speech" : "Enable text-to-speech"}>
          {isTtsEnabled ? <SpeakerOnIcon /> : <SpeakerOffIcon />}
        </button>
      </div>
      <div className="flex-1 overflow-y-auto">
        {renderContent()}
      </div>
    </div>
  );
};

export default ReporterAgent;
