import { GoogleGenAI, Type } from "@google/genai";

// Initialize the Google AI client.
// As per project guidelines, the API key is sourced from `process.env.API_KEY`,
// which is assumed to be pre-configured and available in the execution environment.
const apiKey = process.env.API_KEY;

if (!apiKey) {
  // This error will be thrown if the environment is not set up correctly.
  throw new Error("API_KEY environment variable not set. Gemini API features cannot be initialized.");
}

const ai = new GoogleGenAI({ apiKey });

export const analyzeImageAuthenticity = async (base64Image: string) => {
    const imagePart = {
        inlineData: {
            mimeType: 'image/jpeg', // CameraCapture produces jpeg
            data: base64Image,
        },
    };

    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: { parts: [imagePart] },
            config: {
                systemInstruction: "You are an expert digital image forensics analyst. Your task is to determine if an image is authentic or if it has been manipulated or generated by AI. Analyze the provided image for signs of digital alteration, inconsistencies in lighting, shadows, textures, or artifacts commonly associated with AI image generation (e.g., GANs, diffusion models) or deepfakes. Provide your analysis as a JSON object with the following structure: { \"status\": \"string\", \"confidence\": number, \"reasoning\": \"string\" }. The 'status' must be one of three values: 'Authentic', 'Manipulated', or 'AI-Generated'. 'confidence' should be a value between 0.0 and 1.0 representing your certainty. 'reasoning' should be a brief, one-sentence explanation for your conclusion. Respond ONLY with the JSON object.",
                responseMimeType: "application/json",
                responseSchema: {
                    type: Type.OBJECT,
                    properties: {
                        status: { type: Type.STRING },
                        confidence: { type: Type.NUMBER },
                        reasoning: { type: Type.STRING },
                    },
                    required: ["status", "confidence", "reasoning"],
                },
            },
        });
        const jsonStr = response.text.trim();
        // Type assertion to ensure status is one of the expected values
        const result = JSON.parse(jsonStr) as { status: 'Authentic' | 'Manipulated' | 'AI-Generated', confidence: number, reasoning: string };
        return result;
    } catch (error) {
        console.error("Image authenticity analysis failed:", error);
        // Fail safely by assuming authenticity if the analysis service fails
        return {
            status: 'Authentic' as const,
            confidence: 0.0,
            reasoning: 'AI analysis could not be completed.',
        };
    }
};


export { ai };